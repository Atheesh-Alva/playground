name: Build Release

on:
  push:
    tags: [
      'B*/V*/R*',  # Builds APK, AAB & IPA files; uplaods to Play Store - Internal & TestFlight; e.g., B21/V1.7.12/R24-0503
      'B*/V*/AND', # Builds APK & AAB files; uplaods to Play Store - Internal; e.g., B21/V1.7.12/AND
      'B*/V*/GPS', # Builds AAB file; uplaods to Play Store - Internal; e.g., B21/V1.7.12/GPS
      'B*/V*/IOS', # Builds IPA file; uplaods to TestFlight; e.g., B21/V1.7.12/IOS
      'B*/V*/APK', # Builds APK file; e.g., B21/V1.7.12/APK
      'B*/V*/AAB', # Builds AAB file; e.g., B21/V1.7.12/AAB
      'B*/V*/IPA'  # Builds IPA file; e.g., B21/V1.7.12/IPA
    ]

jobs:
  extract-build-data:
    name: Extract build data
    runs-on: ${{ vars.LINUX_OS }}

    env:
      BUILD_TYPE:

    steps:
      - name: Extract tag details
        id: set-build-data
        run: |
          build_number=$(echo ${{ github.ref_name }} | cut -d '/' -f 1)
          echo "BUILD_NUMBER=${build_number:1}" >> $GITHUB_OUTPUT
          build_version=$(echo ${{ github.ref_name }} | cut -d '/' -f 2)
          echo "BUILD_VERSION=${build_version:1}" >> $GITHUB_OUTPUT
          build_type=$(echo ${{ github.ref_name }} | cut -d '/' -f 3)
          echo "BUILD_TYPE=$build_type" >> $GITHUB_ENV
          echo "BUILD_TYPE=$build_type" >> $GITHUB_OUTPUT
          if [ "$build_type" = AND -o "$build_type" = GPS -o "$build_type" = APK -o "$build_type" = AAB ]; then
            echo "OP_SYS=${{ vars.LINUX_OS }}" >> $GITHUB_OUTPUT
          else
            echo "OP_SYS=${{ vars.MAC_OS }}" >> $GITHUB_OUTPUT
          fi

      - name: Extract build & deploy conditions
        id: set-build-conditions
        run: |
          if ${{ env.BUILD_TYPE == 'AND' }}; then
            echo "BUILD_APK=${{ true }}" >> $GITHUB_OUTPUT
            echo "BUILD_AAB=${{ true }}" >> $GITHUB_OUTPUT
            echo "BUILD_PSI=${{ true }}" >> $GITHUB_OUTPUT
          elif ${{ env.BUILD_TYPE == 'GPS' }}; then
            echo "BUILD_AAB=${{ true }}" >> $GITHUB_OUTPUT
            echo "BUILD_PSI=${{ true }}" >> $GITHUB_OUTPUT
          elif ${{ env.BUILD_TYPE == 'IOS' }}; then
            echo "BUILD_IPA=${{ true }}" >> $GITHUB_OUTPUT
            echo "BUILD_ATF=${{ true }}" >> $GITHUB_OUTPUT
          elif ${{ env.BUILD_TYPE == 'APK' }}; then
            echo "BUILD_APK=${{ true }}" >> $GITHUB_OUTPUT
          elif ${{ env.BUILD_TYPE == 'AAB' }}; then
            echo "BUILD_AAB=${{ true }}" >> $GITHUB_OUTPUT
          elif ${{ env.BUILD_TYPE == 'IPA' }}; then
            echo "BUILD_IPA=${{ true }}" >> $GITHUB_OUTPUT
          else
            echo "BUILD_APK=${{ true }}" >> $GITHUB_OUTPUT
            echo "BUILD_AAB=${{ true }}" >> $GITHUB_OUTPUT
            echo "BUILD_IPA=${{ true }}" >> $GITHUB_OUTPUT
            echo "BUILD_PSI=${{ true }}" >> $GITHUB_OUTPUT
            echo "BUILD_ATF=${{ true }}" >> $GITHUB_OUTPUT
          fi

    outputs:
      BUILD_TYPE: ${{ steps.set-build-data.outputs.BUILD_TYPE }}
      BUILD_NUMBER: ${{ steps.set-build-data.outputs.BUILD_NUMBER }}
      BUILD_VERSION: ${{ steps.set-build-data.outputs.BUILD_VERSION }}
      OP_SYS: ${{ steps.set-build-data.outputs.OP_SYS }}
      BUILD_APK: ${{ steps.set-build-conditions.outputs.BUILD_APK }}
      BUILD_AAB: ${{ steps.set-build-conditions.outputs.BUILD_AAB }}
      BUILD_IPA: ${{ steps.set-build-conditions.outputs.BUILD_IPA }}
      BUILD_PSI: ${{ steps.set-build-conditions.outputs.BUILD_PSI }}
      BUILD_ATF: ${{ steps.set-build-conditions.outputs.BUILD_ATF }}
       
  build:
    name: Setup & Build
    needs: extract-build-data
    runs-on: ${{ needs.extract-build-data.outputs.OP_SYS }}

    env:
      BUILD_NAME: playground-V${{ needs.extract-build-data.outputs.BUILD_VERSION }}-Build-${{ needs.extract-build-data.outputs.BUILD_NUMBER }}

    steps:
        - name: Checkout Code
          uses: actions/checkout@v3
                
        - name: Update encoded.base64
          run: |
            sed -i 's|^.*$|${{ vars.DEBUG_JSON }}|' assets/raw/encoded.base64

        - name: Setup JAVA for Android
          uses: actions/setup-java@v4
          with:
            distribution: "zulu"
            java-version: ${{ vars.JAVA_VERSION }}
            cache: "gradle"

        - name: Flutter Setup
          uses: subosito/flutter-action@v2
          with:
              channel: "stable"
              flutter-version: ${{ vars.FLUTTER_VERSION }}
              cache: true

        - name: Flutter Clean & Get Packages
          run: |
            flutter clean
            flutter pub get

        - name: Cache Flutter SDK
          uses: actions/cache@v3
          with:
            path: /opt/hostedtoolcache/flutter
            key: flutter-${{ hashFiles('**/pubspec.lock') }}
  
        - name: Build APK File
          if: ${{ needs.extract-build-data.outputs.BUILD_APK }}
          run: |
            flutter build apk \
              --target=lib/main.dart \
              --build-name=${{ needs.extract-build-data.outputs.BUILD_VERSION }} \
              --build-number=${{ needs.extract-build-data.outputs.BUILD_NUMBER }} \
              --release

        - name: Upload APK to GitHub Artifacts
          if: ${{ needs.extract-build-data.outputs.BUILD_APK }}
          uses: actions/upload-artifact@v4
          with:
            name: 'APK_${{ env.BUILD_NAME }}'
            path: build/app/outputs/flutter-apk/app-release.apk
          
        - name: Build App Bundle File
          if: ${{ needs.extract-build-data.outputs.BUILD_AAB }}
          run: |
            flutter build appbundle \
              --release \
              --build-name=${{ needs.extract-build-data.outputs.BUILD_VERSION }} \
              --build-number=${{ needs.extract-build-data.outputs.BUILD_NUMBER }}
     
        - name: Upload App Bundle to GitHub Artifacts
          if: ${{ needs.extract-build-data.outputs.BUILD_AAB }}
          uses: actions/upload-artifact@v4
          with:
            name: 'AAB_${{ env.BUILD_NAME }}'
            path: build/app/outputs/bundle/release/app-release.aab

        - name: Setup Codemagic CLI Tools
          if: ${{ needs.extract-build-data.outputs.BUILD_IPA }}
          run: pip3 install codemagic-cli-tools --break-system-packages
       
        - name: Download AppStore API Private Key
          if: ${{ needs.extract-build-data.outputs.BUILD_IPA }}
          id: apptstore_private_key
          uses: timheuer/base64-to-file@v1.2
          with:
            fileName: appstore_private.key
            encodedString: # ${{ secrets.OT_APP_STORE_AUTH_KEY_BASE64 }}

        - name: Download AppStore P12 Certificate
          if: ${{ needs.extract-build-data.outputs.BUILD_IPA }}
          id: apptstore_p12_cert
          uses: timheuer/base64-to-file@v1.2.4
          with:
            fileName: appstore_cert.p12
            encodedString: # ${{ secrets.OT_APP_STORE_P12_BASE64 }}

        - name: Extract AppStore P12 Certificate Key
          if: ${{ needs.extract-build-data.outputs.BUILD_IPA }}
          run: echo "No Extract AppStore P12 Certificate Key found!"
            # openssl pkcs12 -in ${{ steps.apptstore_p12_cert.outputs.filePath }} -nodes -nocerts -passin pass:${{ secrets.OT_APP_STORE_P12_PASSWORD }} | openssl rsa -out $HOME/appstore_signing_cert.key

        - name: Setup App Store Dependencies
          if: ${{ needs.extract-build-data.outputs.BUILD_IPA }}
          run: echo "No Setup App Store Dependencies found!"
# keychain initialize
# app-store-connect fetch-signing-files \
#   --issuer-id=${{ secrets.OT_APP_STORE_ISSUER_ID }} \
#   --key-id=${{ secrets.OT_APP_STORE_KEY_ID }} \
#   --private-key=@file:${{ steps.apptstore_private_key.outputs.filePath }} \
#   --certificate-key=@file:$HOME/appstore_signing_cert.key \
#   --strict-match-identifier \
#   --platform=IOS \
#   --type=IOS_APP_STORE \
#   --create \
#   $(xcode-project detect-bundle-id)
# keychain add-certificates
# xcode-project use-profiles

        - name: Build IPA File
          if: ${{ needs.extract-build-data.outputs.BUILD_IPA }}
          run: flutter build ipa \
            --release \
            --build-name=${{ needs.extract-build-data.outputs.BUILD_VERSION }} \
            --build-number=${{ needs.extract-build-data.outputs.BUILD_NUMBER }}

        - name: Upload IPA to GitHub Artifacts
          if: ${{ needs.extract-build-data.outputs.BUILD_IPA }}
          uses: actions/upload-artifact@v4
          with:
            name: 'IPA_${{ env.BUILD_NAME }}'
            path: build/ios/ipa/playground.ipa
  
        - name: Export build name
          id: set-build-name
          run: echo "BUILD_NAME=${{ env.BUILD_NAME }}" >> $GITHUB_OUTPUT

    outputs:
      BUILD-NAME: ${{ steps.set-build-name.outputs.BUILD_NAME }}

  deploy:
    name: Deploy
    needs: [extract-build-data, build] 
    runs-on: ${{ needs.extract-build-data.outputs.OP_SYS }}

    steps:
      - name: Download APK from Artifacts
        if: ${{ needs.extract-build-data.outputs.BUILD_APK }}
        uses: actions/download-artifact@v4
        with:
          name: 'APK_${{ needs.build.outputs.BUILD-NAME }}'

      - name: Download App Bundle from Artifacts
        if: ${{ needs.extract-build-data.outputs.BUILD_AAB }}
        uses: actions/download-artifact@v4
        with:
          name: 'AAB_${{ needs.build.outputs.BUILD-NAME }}'
  
      - name: Download IPA from Artifacts
        if: ${{ needs.extract-build-data.outputs.BUILD_IPA }}
        uses: actions/download-artifact@v4
        with:
          name: 'IPA_${{ needs.build.outputs.BUILD-NAME }}'
    
      - name: Copy downloaded artifacts
        run: |
          if ${{ needs.extract-build-data.outputs.BUILD_APK != '' && needs.extract-build-data.outputs.BUILD_APK }}; then
            cp ${{ github.workspace }}/app-release.apk ${{ needs.build.outputs.BUILD-NAME }}.apk
          else
            echo "No APK file generated!"
          fi
          if ${{ needs.extract-build-data.outputs.BUILD_AAB != '' && needs.extract-build-data.outputs.BUILD_AAB }}; then
            cp ${{ github.workspace }}/app-release.aab ${{ needs.build.outputs.BUILD-NAME }}.aab
          else
            echo "No App Bundle file generated!"
          fi
          if ${{ needs.extract-build-data.outputs.BUILD_IPA != '' && needs.extract-build-data.outputs.BUILD_IPA }}; then
            cp ${{ github.workspace }}/playground.ipa ${{ needs.build.outputs.BUILD-NAME }}.ipa
          else
            echo "No IPA file generated!"
          fi
 
      - name: Create Release Entry
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ needs.build.outputs.BUILD-NAME }}.apk
            ${{ needs.build.outputs.BUILD-NAME }}.aab
            ${{ needs.build.outputs.BUILD-NAME }}.ipa

      - name: Release App to Play Store Internal Track
        if: ${{ needs.extract-build-data.outputs.BUILD_PSI }}
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: # ${{ secrets.OT_PLAY_STORE_SERVICE_ACCOUNT_KEY }}
          packageName: com.ostrumtech.ostrum
          releaseFiles: app-release.aab
          track: internal
          inAppUpdatePriority: 2
          status: completed # completed or draft

      - name: Release App to App Store TestFlight
        if: ${{ needs.extract-build-data.outputs.BUILD_ATF }}
        run: echo "No release to App Store Testflight found!"
# app-store-connect publish \
#   --issuer-id=${{ secrets.OT_APP_STORE_ISSUER_ID }} \
#   --key-id=${{ secrets.OT_APP_STORE_KEY_ID }} \
#   --private-key=@file:${{ steps.apptstore_private_key.outputs.filePath }} \
#   --path /Users/runner/work/ostrum-flutter/ostrum-flutter/build/ios/ipa/*.ipa

