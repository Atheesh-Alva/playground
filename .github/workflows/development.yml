env:

# Choose the ID for Pull Request Reviewer / Issue Assignee
  OWNER: ${{ vars.ID_ATHEESH }}

  # Choose any label from the below options. If you are choosing more than one label, make sure no space is provided.
  # LABEL: ${{ vars.LABEL_BUG }}
  # # ${{ vars.LABEL_BUG }},${{ vars.LABEL_ENHANCEMENTS }},${{ vars.LABEL_DOCUMENTATION }}

  # bug,documentation,duplicate,enhancement,"good first issue","help wanted",invalid,question,wontfix

# ******************************************** DO NOT ALTER ANY CODE BELOW ********************************************

name: Integrated DevOps Flow
  
on:
  push:
    tags:
      - 'PR-*'
      - 'ISSUE-*'

  pull_request:
      types: [ edited, reopened, synchronize ]

  issues:
      types: [ edited, deleted, reopened ]

  pull_request_review:
      types: [ submitted, edited, dismissed ]

jobs:
  extract-details:
    name: Data Extraction
    runs-on: ${{ vars.LINUX_OS }}

    env:
      ACTION_TYPE: ''

    outputs:
      ACTION_TYPE: ${{ steps.read-json.outputs.ACTION_TYPE }}
      TITLE: ${{ steps.read-json.outputs.title }}
      DESCRIPTION: ${{ steps.read-json.outputs.description }}
      LABEL: ${{ steps.read-json.outputs.label }}

    steps:

      - name: Extract Workflow details
        run: |
          if ${{ github.ref_type == 'tag' }}; then
            echo "ACTION_TYPE=$(echo ${{ github.ref_name }} | cut -d- -f1)" >> $GITHUB_ENV
          else
            echo "ACTION_TYPE=${{ github.event_name }}" >> $GITHUB_ENV
          fi

      - name: Checkout Source Code
        if: ${{ env.ACTION_TYPE == 'PR' }} || ${{ env.ACTION_TYPE == 'ISSUE' }}
        uses: actions/checkout@master
        with:
          fetch-depth: 0

      - name: Extract Workflow JSON details
        id: read-json
        if: ${{ env.ACTION_TYPE == 'PR' || env.ACTION_TYPE == 'ISSUE' }}
        run: |
          echo "ACTION_TYPE=${ACTION_TYPE}" >> $GITHUB_OUTPUT
          echo "${{ vars.WORKFLOW_JSON }}" > lib/workflow.json
          json=$(cat lib/workflow.json)
          echo "title=$(echo "$json" | jq -r '.title')" >> $GITHUB_OUTPUT
          echo "description=$(echo "$json" | jq -r '.description')" >> $GITHUB_OUTPUT
          labels=$(echo "$json" | jq -r '.commit_details | to_entries | map(select(.value == true)) | map(.key) | join(",")')
          echo "label=$labels" >> $GITHUB_OUTPUT

  code-vulnerability-checks:
      name: OWASP Checks
      needs: extract-details
      runs-on: ${{ vars.LINUX_OS }}
      if: ${{ needs.extract-details.outputs.ACTION_TYPE == 'PR' }}

      steps:

        - name: Checkout Source Code
          uses: actions/checkout@master
          with:
            fetch-depth: 0

        - name: Flutter Setup with Version ${{ vars.FLUTTER_VERSION }}
          uses: subosito/flutter-action@v2
          with:
              channel: "stable"
              flutter-version: ${{ vars.FLUTTER_VERSION }}
              cache: true

        - name: Flutter Clean & Get Packages
          run: |
            flutter clean
            flutter pub get

        - name: Flutter Analyze (Static Code Analysis)
          run: flutter analyze

        - name: Flutter Unit Tests with Coverage
          run: flutter test --coverage

        - name: Trivy scan for Code Vulnerabilities
          uses: aquasecurity/trivy-action@master
          with:
            scan-type: fs
            scan-ref: '.' # adjust path to your Flutter project
            format: table
            exit-code: 1
            severity: HIGH,CRITICAL,LOW,MEDIUM,UNKNOWN
            output: trivy-report.txt  # or json, sarif, etc.

        - name: Trivy Scan Report
          run: cat trivy-report.txt

  pr:
    
    name: Create Pull Request
    runs-on: ${{ vars.LINUX_OS }}
    needs: [extract-details, code-vulnerability-checks]
    if: ${{ needs.extract-details.outputs.ACTION_TYPE == 'PR' }}

    env: 
      SOURCE_BRANCH: ''

    steps:

        - name: Checkout Source Code
          uses: actions/checkout@master
          with:
            fetch-depth: 0

        - name: Get Source Branch
          run: |
              branch=$(git branch -r --contains ${{ github.ref }} --format "%(refname:lstrip=3)")
              echo "SOURCE_BRANCH=$branch" >> $GITHUB_ENV

        - name: Create Pull Request 
          run: |
              gh pr create \
              --base ${{ vars.PR_DESTINATION_BRANCH }} \
              --head ${{ env.SOURCE_BRANCH }} \
              --title '[AUTO] Tag - ${{ github.ref_name }} - ${{ needs.extract-details.outputs.title }}' \
              --body 'Auto created by @${{ github.event.sender.login }}: ${{ needs.extract-details.outputs.description }}' \
              --reviewer ${{ env.OWNER }} \
              --assignee ${{ github.event.sender.login }} \
              --label ${{ needs.extract-details.outputs.label }}
          env:
              GITHUB_TOKEN: ${{ github.token }}
    
  issue:
    name: Create Issue
    runs-on: ${{ vars.LINUX_OS }}
    needs: [extract-details]
    if: ${{ needs.extract-details.outputs.ACTION_TYPE == 'ISSUE' }}

    steps:

        - name: Create an Issue
          uses: actions-ecosystem/action-create-issue@v1
          with:
              github_token: ${{ github.token }}
              title: '[AUTO] Tag - ${{ github.ref_name }}'
              body: 'Auto created by @${{ github.event.sender.login }}: ${{ github.event.head_commit.message }}'
              labels: ${{ needs.extract-details.outputs.label }}
              assignees: ${{ env.OWNER }}

  pr-merge:
    name: Merge PR after review
    runs-on: ${{ vars.LINUX_OS }}
    needs: [extract-details]
    if: github.event_name == 'pull_request_review' && github.event.review.state == 'APPROVED'

    steps:

        - name: Checkout Source Code
          uses: actions/checkout@master
          with:
            fetch-depth: 0

        - name: Check PR mergeable status
          id: pr-status
          run: |
            mergeable=$(gh pr view ${{ github.event.pull_request.number }} --json mergeable --jq '.mergeable')
            echo "mergeable=$mergeable" >> $GITHUB_OUTPUT
          env:
            GH_TOKEN: ${{ github.token }}

        - name: Auto-Merge Pull Request
          run: |
            if [ ${{ steps.pr-status.outputs.mergeable }} == "MERGEABLE" ]; then
              gh pr merge --merge --auto "${{ github.event.pull_request.number }}"
            else
              echo "PR merge is ${{ steps.pr-status.outputs.mergeable }}. Please resolve before merging."
              exit 1
            fi
          env:
              GH_TOKEN: ${{ github.token }}

  notify:
    name: Notification to Flutter team
    runs-on: ubuntu-latest
    needs: [extract-details, code-vulnerability-checks, pr, issue, pr-merge]
    if: always()  
    steps:
      - name: Set workflow status
        id: set_status
        run: |
          if [ "${{ needs.extract-details.result }}" != "success" ]; then
            echo "status=❌ Extracting workflow details ${{ needs.extract-details.result }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "status=Pull Request ${{ github.event.action || 'N/A' }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "issues" ]]; then
            echo "status=Issue ${{ github.event.action || 'N/A' }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request_review" ]]; then
            echo "status=Pull Request Review ${{ github.event.action || 'N/A' }}" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.code-vulnerability-checks.result }}" == "failure" ]]; then
            echo "status=❌ Failed while checking code vulnerabilities" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.pr.result }}" == "failure" ]]; then
            echo "status=❌ Failed while creating Pull Request" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.issue.result }}" == "failure" ]]; then
            echo "status=❌ Failed while creating Issue" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.pr-merge.result }}" == "failure" ]]; then
            echo "status=❌ Failed while merging Pull Request after review" >> $GITHUB_OUTPUT
          else
            echo "status=✅ Workflow Succeeded" >> $GITHUB_OUTPUT
          fi

      - name: MS Teams Notification - Flutter Team
        uses: freenet-actions/ms-teams-deploy-card@master
        id: ms_teams_ostrum
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          webhook-uri: ${{ secrets.MS_TEAMS_PLAYGROUND_WEBHOOK_URI }}
          show-on-start: false
          card-layout-exit: complete
          enable-review-diffs-action: false
          include-files: false
          custom-facts: |
            - name: Action Type
              value: ${{ needs.extract-details.outputs.ACTION_TYPE }}
            - name: Workflow Status
              value: ${{ steps.set_status.outputs.status }}
          custom-actions: |
            - text: Ostrum tech LTD
              url: "https://www.ostrumtech.com"
            - text: Privacy Policy
              url: "https://www.ostrumtech.com/privacy-policy"
            - text: Ostrum Web (DEV)
              url: "https://ltn.ui.dev.ostrumtech.com"
